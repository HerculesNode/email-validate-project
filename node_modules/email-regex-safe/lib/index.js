"use strict";

const ipRegex = require('ip-regex');
const tlds = require('tlds');
const ipv4 = ipRegex.v4().source;
const ipv6 = ipRegex.v6().source;
const host = '(?:(?:[a-z\\u00a1-\\uffff0-9][-_]*)*[a-z\\u00a1-\\uffff0-9]+)';
const domain = '(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*';
const strictTld = '(?:[a-z\\u00a1-\\uffff]{2,})';
const defaultTlds = `(?:${tlds.sort((a, b) => b.length - a.length).join('|')})`;
let RE2;
let hasRE2;
module.exports = options => {
  options = {
    //
    // attempt to use re2, if set to false will use RegExp
    // (we did this approach because we don't want to load in-memory re2 if users don't want it)
    // <https://github.com/spamscanner/url-regex-safe/issues/28>
    //
    re2: true,
    exact: false,
    strict: false,
    gmail: true,
    utf8: true,
    localhost: true,
    ipv4: true,
    ipv6: false,
    returnString: false,
    ...options
  };

  /* istanbul ignore next */
  const SafeRegExp = options.re2 && hasRE2 !== false ? (() => {
    if (typeof RE2 === 'function') return RE2;
    try {
      RE2 = require('re2');
      return typeof RE2 === 'function' ? RE2 : RegExp;
    } catch {
      hasRE2 = false;
      return RegExp;
    }
  })() : RegExp;

  // Add ability to pass custom list of tlds
  // <https://github.com/kevva/url-regex/pull/66>
  const tld = `(?:\\.${options.strict ? strictTld : options.tlds ? `(?:${options.tlds.sort((a, b) => b.length - a.length).join('|')})` : defaultTlds})`;

  // <https://github.com/validatorjs/validator.js/blob/master/src/lib/isEmail.js>
  const emailUserPart = options.gmail ?
  // https://support.google.com/mail/answer/9211434?hl=en#:~:text=Usernames%20can%20contain%20letters%20(a%2Dz,in%20a%20row.
  // cannot contain: &, =, _, ', -, +, comma, brackets, or more than one period in a row
  // note that we are parsing for emails, not enforcing username match, so we allow +
  '[^\\W_](?:[\\w\\.\\+]+)' // NOTE: we don't end with `[^\\W]` here since Gmail doesn't do this in webmail
  : options.utf8 ? "[^\\W_](?:[a-z\\d!#\\$%&'\\.\\*\\+\\-\\/=\\?\\^_`{\\|}~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+)" : "[^\\W_](?:[a-z\\d!#\\$%&'\\.\\*\\+\\-\\/=\\?\\^_`{\\|}~]+)";
  let regex = `(?:${emailUserPart}@(?:`;
  if (options.localhost) regex += 'localhost|';
  if (options.ipv4) regex += `${ipv4}|`;
  if (options.ipv6) regex += `${ipv6}|`;
  regex += `${host}${domain}${tld}))`;

  // Add option to return the regex string instead of a RegExp
  if (options.returnString) return regex;
  return options.exact ? new SafeRegExp(`(?:^${regex}$)`, 'i') : new SafeRegExp(regex, 'ig');
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpcFJlZ2V4IiwicmVxdWlyZSIsInRsZHMiLCJpcHY0IiwidjQiLCJzb3VyY2UiLCJpcHY2IiwidjYiLCJob3N0IiwiZG9tYWluIiwic3RyaWN0VGxkIiwiZGVmYXVsdFRsZHMiLCJzb3J0IiwiYSIsImIiLCJsZW5ndGgiLCJqb2luIiwiUkUyIiwiaGFzUkUyIiwibW9kdWxlIiwiZXhwb3J0cyIsIm9wdGlvbnMiLCJyZTIiLCJleGFjdCIsInN0cmljdCIsImdtYWlsIiwidXRmOCIsImxvY2FsaG9zdCIsInJldHVyblN0cmluZyIsIlNhZmVSZWdFeHAiLCJSZWdFeHAiLCJ0bGQiLCJlbWFpbFVzZXJQYXJ0IiwicmVnZXgiXSwic291cmNlcyI6WyIuLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgaXBSZWdleCA9IHJlcXVpcmUoJ2lwLXJlZ2V4Jyk7XG5jb25zdCB0bGRzID0gcmVxdWlyZSgndGxkcycpO1xuXG5jb25zdCBpcHY0ID0gaXBSZWdleC52NCgpLnNvdXJjZTtcbmNvbnN0IGlwdjYgPSBpcFJlZ2V4LnY2KCkuc291cmNlO1xuY29uc3QgaG9zdCA9ICcoPzooPzpbYS16XFxcXHUwMGExLVxcXFx1ZmZmZjAtOV1bLV9dKikqW2EtelxcXFx1MDBhMS1cXFxcdWZmZmYwLTldKyknO1xuY29uc3QgZG9tYWluID0gJyg/OlxcXFwuKD86W2EtelxcXFx1MDBhMS1cXFxcdWZmZmYwLTldLSopKlthLXpcXFxcdTAwYTEtXFxcXHVmZmZmMC05XSspKic7XG5jb25zdCBzdHJpY3RUbGQgPSAnKD86W2EtelxcXFx1MDBhMS1cXFxcdWZmZmZdezIsfSknO1xuY29uc3QgZGVmYXVsdFRsZHMgPSBgKD86JHt0bGRzLnNvcnQoKGEsIGIpID0+IGIubGVuZ3RoIC0gYS5sZW5ndGgpLmpvaW4oJ3wnKX0pYDtcblxubGV0IFJFMjtcbmxldCBoYXNSRTI7XG5cbm1vZHVsZS5leHBvcnRzID0gKG9wdGlvbnMpID0+IHtcbiAgb3B0aW9ucyA9IHtcbiAgICAvL1xuICAgIC8vIGF0dGVtcHQgdG8gdXNlIHJlMiwgaWYgc2V0IHRvIGZhbHNlIHdpbGwgdXNlIFJlZ0V4cFxuICAgIC8vICh3ZSBkaWQgdGhpcyBhcHByb2FjaCBiZWNhdXNlIHdlIGRvbid0IHdhbnQgdG8gbG9hZCBpbi1tZW1vcnkgcmUyIGlmIHVzZXJzIGRvbid0IHdhbnQgaXQpXG4gICAgLy8gPGh0dHBzOi8vZ2l0aHViLmNvbS9zcGFtc2Nhbm5lci91cmwtcmVnZXgtc2FmZS9pc3N1ZXMvMjg+XG4gICAgLy9cbiAgICByZTI6IHRydWUsXG4gICAgZXhhY3Q6IGZhbHNlLFxuICAgIHN0cmljdDogZmFsc2UsXG4gICAgZ21haWw6IHRydWUsXG4gICAgdXRmODogdHJ1ZSxcbiAgICBsb2NhbGhvc3Q6IHRydWUsXG4gICAgaXB2NDogdHJ1ZSxcbiAgICBpcHY2OiBmYWxzZSxcbiAgICByZXR1cm5TdHJpbmc6IGZhbHNlLFxuICAgIC4uLm9wdGlvbnNcbiAgfTtcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBjb25zdCBTYWZlUmVnRXhwID1cbiAgICBvcHRpb25zLnJlMiAmJiBoYXNSRTIgIT09IGZhbHNlXG4gICAgICA/ICgoKSA9PiB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBSRTIgPT09ICdmdW5jdGlvbicpIHJldHVybiBSRTI7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIFJFMiA9IHJlcXVpcmUoJ3JlMicpO1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBSRTIgPT09ICdmdW5jdGlvbicgPyBSRTIgOiBSZWdFeHA7XG4gICAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICBoYXNSRTIgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiBSZWdFeHA7XG4gICAgICAgICAgfVxuICAgICAgICB9KSgpXG4gICAgICA6IFJlZ0V4cDtcblxuICAvLyBBZGQgYWJpbGl0eSB0byBwYXNzIGN1c3RvbSBsaXN0IG9mIHRsZHNcbiAgLy8gPGh0dHBzOi8vZ2l0aHViLmNvbS9rZXZ2YS91cmwtcmVnZXgvcHVsbC82Nj5cbiAgY29uc3QgdGxkID0gYCg/OlxcXFwuJHtcbiAgICBvcHRpb25zLnN0cmljdFxuICAgICAgPyBzdHJpY3RUbGRcbiAgICAgIDogb3B0aW9ucy50bGRzXG4gICAgICA/IGAoPzoke29wdGlvbnMudGxkcy5zb3J0KChhLCBiKSA9PiBiLmxlbmd0aCAtIGEubGVuZ3RoKS5qb2luKCd8Jyl9KWBcbiAgICAgIDogZGVmYXVsdFRsZHNcbiAgfSlgO1xuXG4gIC8vIDxodHRwczovL2dpdGh1Yi5jb20vdmFsaWRhdG9yanMvdmFsaWRhdG9yLmpzL2Jsb2IvbWFzdGVyL3NyYy9saWIvaXNFbWFpbC5qcz5cbiAgY29uc3QgZW1haWxVc2VyUGFydCA9IG9wdGlvbnMuZ21haWxcbiAgICA/IC8vIGh0dHBzOi8vc3VwcG9ydC5nb29nbGUuY29tL21haWwvYW5zd2VyLzkyMTE0MzQ/aGw9ZW4jOn46dGV4dD1Vc2VybmFtZXMlMjBjYW4lMjBjb250YWluJTIwbGV0dGVycyUyMChhJTJEeixpbiUyMGElMjByb3cuXG4gICAgICAvLyBjYW5ub3QgY29udGFpbjogJiwgPSwgXywgJywgLSwgKywgY29tbWEsIGJyYWNrZXRzLCBvciBtb3JlIHRoYW4gb25lIHBlcmlvZCBpbiBhIHJvd1xuICAgICAgLy8gbm90ZSB0aGF0IHdlIGFyZSBwYXJzaW5nIGZvciBlbWFpbHMsIG5vdCBlbmZvcmNpbmcgdXNlcm5hbWUgbWF0Y2gsIHNvIHdlIGFsbG93ICtcbiAgICAgICdbXlxcXFxXX10oPzpbXFxcXHdcXFxcLlxcXFwrXSspJyAvLyBOT1RFOiB3ZSBkb24ndCBlbmQgd2l0aCBgW15cXFxcV11gIGhlcmUgc2luY2UgR21haWwgZG9lc24ndCBkbyB0aGlzIGluIHdlYm1haWxcbiAgICA6IG9wdGlvbnMudXRmOFxuICAgID8gXCJbXlxcXFxXX10oPzpbYS16XFxcXGQhI1xcXFwkJSYnXFxcXC5cXFxcKlxcXFwrXFxcXC1cXFxcLz1cXFxcP1xcXFxeX2B7XFxcXHx9flxcXFx1MDBBMC1cXFxcdUQ3RkZcXFxcdUY5MDAtXFxcXHVGRENGXFxcXHVGREYwLVxcXFx1RkZFRl0rKVwiXG4gICAgOiBcIlteXFxcXFdfXSg/OlthLXpcXFxcZCEjXFxcXCQlJidcXFxcLlxcXFwqXFxcXCtcXFxcLVxcXFwvPVxcXFw/XFxcXF5fYHtcXFxcfH1+XSspXCI7XG5cbiAgbGV0IHJlZ2V4ID0gYCg/OiR7ZW1haWxVc2VyUGFydH1AKD86YDtcbiAgaWYgKG9wdGlvbnMubG9jYWxob3N0KSByZWdleCArPSAnbG9jYWxob3N0fCc7XG4gIGlmIChvcHRpb25zLmlwdjQpIHJlZ2V4ICs9IGAke2lwdjR9fGA7XG4gIGlmIChvcHRpb25zLmlwdjYpIHJlZ2V4ICs9IGAke2lwdjZ9fGA7XG4gIHJlZ2V4ICs9IGAke2hvc3R9JHtkb21haW59JHt0bGR9KSlgO1xuXG4gIC8vIEFkZCBvcHRpb24gdG8gcmV0dXJuIHRoZSByZWdleCBzdHJpbmcgaW5zdGVhZCBvZiBhIFJlZ0V4cFxuICBpZiAob3B0aW9ucy5yZXR1cm5TdHJpbmcpIHJldHVybiByZWdleDtcblxuICByZXR1cm4gb3B0aW9ucy5leGFjdFxuICAgID8gbmV3IFNhZmVSZWdFeHAoYCg/Ol4ke3JlZ2V4fSQpYCwgJ2knKVxuICAgIDogbmV3IFNhZmVSZWdFeHAocmVnZXgsICdpZycpO1xufTtcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxVQUFVLENBQUM7QUFDbkMsTUFBTUMsSUFBSSxHQUFHRCxPQUFPLENBQUMsTUFBTSxDQUFDO0FBRTVCLE1BQU1FLElBQUksR0FBR0gsT0FBTyxDQUFDSSxFQUFFLENBQUMsQ0FBQyxDQUFDQyxNQUFNO0FBQ2hDLE1BQU1DLElBQUksR0FBR04sT0FBTyxDQUFDTyxFQUFFLENBQUMsQ0FBQyxDQUFDRixNQUFNO0FBQ2hDLE1BQU1HLElBQUksR0FBRywrREFBK0Q7QUFDNUUsTUFBTUMsTUFBTSxHQUFHLGdFQUFnRTtBQUMvRSxNQUFNQyxTQUFTLEdBQUcsOEJBQThCO0FBQ2hE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