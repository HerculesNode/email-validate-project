{"version":3,"file":"index.js","names":["ipRegex","require","tlds","ipv4","v4","source","ipv6","v6","host","domain","strictTld","defaultTlds","sort","a","b","length","join","RE2","hasRE2","module","exports","options","re2","exact","strict","gmail","utf8","localhost","returnString","SafeRegExp","RegExp","tld","emailUserPart","regex"],"sources":["../src/index.js"],"sourcesContent":["const ipRegex = require('ip-regex');\nconst tlds = require('tlds');\n\nconst ipv4 = ipRegex.v4().source;\nconst ipv6 = ipRegex.v6().source;\nconst host = '(?:(?:[a-z\\\\u00a1-\\\\uffff0-9][-_]*)*[a-z\\\\u00a1-\\\\uffff0-9]+)';\nconst domain = '(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*';\nconst strictTld = '(?:[a-z\\\\u00a1-\\\\uffff]{2,})';\nconst defaultTlds = `(?:${tlds.sort((a, b) => b.length - a.length).join('|')})`;\n\nlet RE2;\nlet hasRE2;\n\nmodule.exports = (options) => {\n  options = {\n    //\n    // attempt to use re2, if set to false will use RegExp\n    // (we did this approach because we don't want to load in-memory re2 if users don't want it)\n    // <https://github.com/spamscanner/url-regex-safe/issues/28>\n    //\n    re2: true,\n    exact: false,\n    strict: false,\n    gmail: true,\n    utf8: true,\n    localhost: true,\n    ipv4: true,\n    ipv6: false,\n    returnString: false,\n    ...options\n  };\n\n  /* istanbul ignore next */\n  const SafeRegExp =\n    options.re2 && hasRE2 !== false\n      ? (() => {\n          if (typeof RE2 === 'function') return RE2;\n          try {\n            RE2 = require('re2');\n            return typeof RE2 === 'function' ? RE2 : RegExp;\n          } catch {\n            hasRE2 = false;\n            return RegExp;\n          }\n        })()\n      : RegExp;\n\n  // Add ability to pass custom list of tlds\n  // <https://github.com/kevva/url-regex/pull/66>\n  const tld = `(?:\\\\.${\n    options.strict\n      ? strictTld\n      : options.tlds\n      ? `(?:${options.tlds.sort((a, b) => b.length - a.length).join('|')})`\n      : defaultTlds\n  })`;\n\n  // <https://github.com/validatorjs/validator.js/blob/master/src/lib/isEmail.js>\n  const emailUserPart = options.gmail\n    ? // https://support.google.com/mail/answer/9211434?hl=en#:~:text=Usernames%20can%20contain%20letters%20(a%2Dz,in%20a%20row.\n      // cannot contain: &, =, _, ', -, +, comma, brackets, or more than one period in a row\n      // note that we are parsing for emails, not enforcing username match, so we allow +\n      '[^\\\\W_](?:[\\\\w\\\\.\\\\+]+)' // NOTE: we don't end with `[^\\\\W]` here since Gmail doesn't do this in webmail\n    : options.utf8\n    ? \"[^\\\\W_](?:[a-z\\\\d!#\\\\$%&'\\\\.\\\\*\\\\+\\\\-\\\\/=\\\\?\\\\^_`{\\\\|}~\\\\u00A0-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFEF]+)\"\n    : \"[^\\\\W_](?:[a-z\\\\d!#\\\\$%&'\\\\.\\\\*\\\\+\\\\-\\\\/=\\\\?\\\\^_`{\\\\|}~]+)\";\n\n  let regex = `(?:${emailUserPart}@(?:`;\n  if (options.localhost) regex += 'localhost|';\n  if (options.ipv4) regex += `${ipv4}|`;\n  if (options.ipv6) regex += `${ipv6}|`;\n  regex += `${host}${domain}${tld}))`;\n\n  // Add option to return the regex string instead of a RegExp\n  if (options.returnString) return regex;\n\n  return options.exact\n    ? new SafeRegExp(`(?:^${regex}$)`, 'i')\n    : new SafeRegExp(regex, 'ig');\n};\n"],"mappings":";;AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,UAAU,CAAC;AACnC,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAE5B,MAAME,IAAI,GAAGH,OAAO,CAACI,EAAE,CAAC,CAAC,CAACC,MAAM;AAChC,MAAMC,IAAI,GAAGN,OAAO,CAACO,EAAE,CAAC,CAAC,CAACF,MAAM;AAChC,MAAMG,IAAI,GAAG,+DAA+D;AAC5E,MAAMC,MAAM,GAAG,gEAAgE;AAC/E,MAAMC,SAAS,GAAG,8BAA8B;AAChD,MAAMC,WAAW,GAAI,MAAKT,IAAI,CAACU,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACC,MAAM,GAAGF,CAAC,CAACE,MAAM,CAAC,CAACC,IAAI,CAAC,GAAG,CAAE,GAAE;AAE/E,IAAIC,GAAG;AACP,IAAIC,MAAM;AAEVC,MAAM,CAACC,OAAO,GAAIC,OAAO,IAAK;EAC5BA,OAAO,GAAG;IACR;IACA;IACA;IACA;IACA;IACAC,GAAG,EAAE,IAAI;IACTC,KAAK,EAAE,KAAK;IACZC,MAAM,EAAE,KAAK;IACbC,KAAK,EAAE,IAAI;IACXC,IAAI,EAAE,IAAI;IACVC,SAAS,EAAE,IAAI;IACfxB,IAAI,EAAE,IAAI;IACVG,IAAI,EAAE,KAAK;IACXsB,YAAY,EAAE,KAAK;IACnB,GAAGP;EACL,CAAC;;EAED;EACA,MAAMQ,UAAU,GACdR,OAAO,CAACC,GAAG,IAAIJ,MAAM,KAAK,KAAK,GAC3B,CAAC,MAAM;IACL,IAAI,OAAOD,GAAG,KAAK,UAAU,EAAE,OAAOA,GAAG;IACzC,IAAI;MACFA,GAAG,GAAGhB,OAAO,CAAC,KAAK,CAAC;MACpB,OAAO,OAAOgB,GAAG,KAAK,UAAU,GAAGA,GAAG,GAAGa,MAAM;IACjD,CAAC,CAAC,MAAM;MACNZ,MAAM,GAAG,KAAK;MACd,OAAOY,MAAM;IACf;EACF,CAAC,EAAE,CAAC,GACJA,MAAM;;EAEZ;EACA;EACA,MAAMC,GAAG,GAAI,SACXV,OAAO,CAACG,MAAM,GACVd,SAAS,GACTW,OAAO,CAACnB,IAAI,GACX,MAAKmB,OAAO,CAACnB,IAAI,CAACU,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACC,MAAM,GAAGF,CAAC,CAACE,MAAM,CAAC,CAACC,IAAI,CAAC,GAAG,CAAE,GAAE,GACnEL,WACL,GAAE;;EAEH;EACA,MAAMqB,aAAa,GAAGX,OAAO,CAACI,KAAK;EAC/B;EACA;EACA;EACA,yBAAyB,CAAC;EAAA,EAC1BJ,OAAO,CAACK,IAAI,GACZ,yGAAyG,GACzG,4DAA4D;EAEhE,IAAIO,KAAK,GAAI,MAAKD,aAAc,MAAK;EACrC,IAAIX,OAAO,CAACM,SAAS,EAAEM,KAAK,IAAI,YAAY;EAC5C,IAAIZ,OAAO,CAAClB,IAAI,EAAE8B,KAAK,IAAK,GAAE9B,IAAK,GAAE;EACrC,IAAIkB,OAAO,CAACf,IAAI,EAAE2B,KAAK,IAAK,GAAE3B,IAAK,GAAE;EACrC2B,KAAK,IAAK,GAAEzB,IAAK,GAAEC,MAAO,GAAEsB,GAAI,IAAG;;EAEnC;EACA,IAAIV,OAAO,CAACO,YAAY,EAAE,OAAOK,KAAK;EAEtC,OAAOZ,OAAO,CAACE,KAAK,GAChB,IAAIM,UAAU,CAAE,OAAMI,KAAM,IAAG,EAAE,GAAG,CAAC,GACrC,IAAIJ,UAAU,CAACI,KAAK,EAAE,IAAI,CAAC;AACjC,CAAC"}